{"ast":null,"code":"var rotateLeft = function (matrix) {\n  var rows = matrix.length;\n  var columns = matrix[0].length;\n  var res = [];\n  for (var row = 0; row < rows; ++row) {\n    res.push([]);\n    for (var column = 0; column < columns; ++column) {\n      res[row][column] = matrix[column][columns - row - 1];\n    }\n  }\n  return res;\n};\nclass Tile {\n  constructor(value, row, column) {\n    this.value = value || 0;\n    this.row = row || -1;\n    this.column = column || -1;\n    this.oldRow = -1;\n    this.oldColumn = -1;\n    this.markForDeletion = false;\n    this.mergedInto = null;\n    this.id = this.id++ || 0;\n  }\n  moveTo(row, column) {\n    this.oldRow = this.row;\n    this.oldColumn = this.column;\n    this.row = row;\n    this.column = column;\n  }\n  isNew() {\n    return this.oldRow === -1 && !this.mergedInto;\n  }\n  hasMoved() {\n    return this.fromRow() !== -1 && (this.fromRow() !== this.toRow() || this.fromColumn() !== this.toColumn()) || this.mergedInto;\n  }\n  fromRow() {\n    return this.mergedInto ? this.row : this.oldRow;\n  }\n  fromColumn() {\n    return this.mergedInto ? this.column : this.oldColumn;\n  }\n  toRow() {\n    return this.mergedInto ? this.mergedInto.row : this.row;\n  }\n  toColumn() {\n    return this.mergedInto ? this.mergedInto.column : this.column;\n  }\n}\nclass Board {\n  constructor() {\n    this.tiles = [];\n    this.cells = [];\n    this.score = 0;\n    this.size = 4;\n    this.fourProbability = 0.1;\n    this.deltaX = [-1, 0, 1, 0];\n    this.deltaY = [0, -1, 0, 1];\n    for (var i = 0; i < this.size; ++i) {\n      this.cells[i] = [this.addTile(), this.addTile(), this.addTile(), this.addTile()];\n    }\n    this.addRandomTile();\n    this.addRandomTile();\n    this.setPositions();\n    this.won = false;\n  }\n  addTile(args) {\n    var res = new Tile(args);\n    this.tiles.push(res);\n    return res;\n  }\n  moveLeft() {\n    var hasChanged = false;\n    for (var row = 0; row < this.size; ++row) {\n      var currentRow = this.cells[row].filter(tile => tile.value !== 0);\n      var resultRow = [];\n      for (var target = 0; target < this.size; ++target) {\n        var targetTile = currentRow.length ? currentRow.shift() : this.addTile();\n        if (currentRow.length > 0 && currentRow[0].value === targetTile.value) {\n          var tile1 = targetTile;\n          targetTile = this.addTile(targetTile.value);\n          tile1.mergedInto = targetTile;\n          var tile2 = currentRow.shift();\n          tile2.mergedInto = targetTile;\n          targetTile.value += tile2.value;\n          this.score += tile1.value + tile2.value;\n        }\n        resultRow[target] = targetTile;\n        this.won |= targetTile.value === 2048;\n        hasChanged |= targetTile.value !== this.cells[row][target].value;\n      }\n      this.cells[row] = resultRow;\n    }\n    return hasChanged;\n  }\n  setPositions() {\n    this.cells.forEach((row, rowIndex) => {\n      row.forEach((tile, columnIndex) => {\n        tile.oldRow = tile.row;\n        tile.oldColumn = tile.column;\n        tile.row = rowIndex;\n        tile.column = columnIndex;\n        tile.markForDeletion = false;\n      });\n    });\n  }\n  addRandomTile() {\n    var emptyCells = [];\n    for (var r = 0; r < this.size; ++r) {\n      for (var c = 0; c < this.size; ++c) {\n        if (this.cells[r][c].value === 0) {\n          emptyCells.push({\n            r: r,\n            c: c\n          });\n        }\n      }\n    }\n    var index = ~~(Math.random() * emptyCells.length);\n    var cell = emptyCells[index];\n    var newValue = Math.random() < this.fourProbability ? 4 : 2;\n    this.cells[cell.r][cell.c] = this.addTile(newValue);\n  }\n  move(direction) {\n    // 0 -> left, 1 -> up, 2 -> right, 3 -> down\n    this.clearOldTiles();\n    for (var i = 0; i < direction; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    var hasChanged = this.moveLeft();\n    for (let i = direction; i < 4; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    if (hasChanged) {\n      this.addRandomTile();\n    }\n    this.setPositions();\n    return this;\n  }\n  clearOldTiles() {\n    this.tiles = this.tiles.filter(tile => tile.markForDeletion === false);\n    this.tiles.forEach(tile => {\n      tile.markForDeletion = true;\n    });\n  }\n  hasWon() {\n    return this.won;\n  }\n  hasLost() {\n    var canMove = false;\n    for (var row = 0; row < this.size; ++row) {\n      for (var column = 0; column < this.size; ++column) {\n        canMove |= this.cells[row][column].value === 0;\n        for (var dir = 0; dir < 4; ++dir) {\n          var newRow = row + this.deltaX[dir];\n          var newColumn = column + this.deltaY[dir];\n          if (newRow < 0 || newRow >= this.size || newColumn < 0 || newColumn >= this.size) {\n            continue;\n          }\n          canMove |= this.cells[row][column].value === this.cells[newRow][newColumn].value;\n        }\n      }\n    }\n    return !canMove;\n  }\n}\nexport { Board };","map":{"version":3,"names":["rotateLeft","matrix","rows","length","columns","res","row","push","column","Tile","constructor","value","oldRow","oldColumn","markForDeletion","mergedInto","id","moveTo","isNew","hasMoved","fromRow","toRow","fromColumn","toColumn","Board","tiles","cells","score","size","fourProbability","deltaX","deltaY","i","addTile","addRandomTile","setPositions","won","args","moveLeft","hasChanged","currentRow","filter","tile","resultRow","target","targetTile","shift","tile1","tile2","forEach","rowIndex","columnIndex","emptyCells","r","c","index","Math","random","cell","newValue","move","direction","clearOldTiles","hasWon","hasLost","canMove","dir","newRow","newColumn"],"sources":["D:/Projects/OS_project/2048-animated/src/helper/index.js"],"sourcesContent":["var rotateLeft = function (matrix) {\n  var rows = matrix.length;\n  var columns = matrix[0].length;\n  var res = [];\n  for (var row = 0; row < rows; ++row) {\n    res.push([]);\n    for (var column = 0; column < columns; ++column) {\n      res[row][column] = matrix[column][columns - row - 1];\n    }\n  }\n  return res;\n};\n\nclass Tile {\n  constructor(value, row, column) {\n    this.value = value || 0;\n    this.row = row || -1;\n    this.column = column || -1;\n    this.oldRow = -1;\n    this.oldColumn = -1;\n    this.markForDeletion = false;\n    this.mergedInto = null;\n    this.id = this.id++ || 0;\n  }\n  moveTo(row, column) {\n    this.oldRow = this.row;\n    this.oldColumn = this.column;\n    this.row = row;\n    this.column = column;\n  }\n  isNew() {\n    return this.oldRow === -1 && !this.mergedInto;\n  }\n  hasMoved() {\n    return (\n      (this.fromRow() !== -1 &&\n        (this.fromRow() !== this.toRow() ||\n          this.fromColumn() !== this.toColumn())) ||\n      this.mergedInto\n    );\n  }\n  fromRow() {\n    return this.mergedInto ? this.row : this.oldRow;\n  }\n  fromColumn() {\n    return this.mergedInto ? this.column : this.oldColumn;\n  }\n  toRow() {\n    return this.mergedInto ? this.mergedInto.row : this.row;\n  }\n  toColumn() {\n    return this.mergedInto ? this.mergedInto.column : this.column;\n  }\n}\n\nclass Board {\n  constructor() {\n    this.tiles = [];\n    this.cells = [];\n    this.score = 0;\n    this.size = 4;\n    this.fourProbability = 0.1;\n    this.deltaX = [-1, 0, 1, 0];\n    this.deltaY = [0, -1, 0, 1];\n    for (var i = 0; i < this.size; ++i) {\n      this.cells[i] = [\n        this.addTile(),\n        this.addTile(),\n        this.addTile(),\n        this.addTile(),\n      ];\n    }\n    this.addRandomTile();\n    this.addRandomTile();\n    this.setPositions();\n    this.won = false;\n  }\n  addTile(args) {\n    var res = new Tile(args);\n    this.tiles.push(res);\n    return res;\n  }\n\n  moveLeft() {\n    var hasChanged = false;\n    for (var row = 0; row < this.size; ++row) {\n      var currentRow = this.cells[row].filter((tile) => tile.value !== 0);\n      var resultRow = [];\n      for (var target = 0; target < this.size; ++target) {\n        var targetTile = currentRow.length\n          ? currentRow.shift()\n          : this.addTile();\n        if (currentRow.length > 0 && currentRow[0].value === targetTile.value) {\n          var tile1 = targetTile;\n          targetTile = this.addTile(targetTile.value);\n          tile1.mergedInto = targetTile;\n          var tile2 = currentRow.shift();\n          tile2.mergedInto = targetTile;\n          targetTile.value += tile2.value;\n          this.score += tile1.value + tile2.value;\n        }\n        resultRow[target] = targetTile;\n        this.won |= targetTile.value === 2048;\n        hasChanged |= targetTile.value !== this.cells[row][target].value;\n      }\n      this.cells[row] = resultRow;\n    }\n    return hasChanged;\n  }\n  setPositions() {\n    this.cells.forEach((row, rowIndex) => {\n      row.forEach((tile, columnIndex) => {\n        tile.oldRow = tile.row;\n        tile.oldColumn = tile.column;\n        tile.row = rowIndex;\n        tile.column = columnIndex;\n        tile.markForDeletion = false;\n      });\n    });\n  }\n  addRandomTile() {\n    var emptyCells = [];\n    for (var r = 0; r < this.size; ++r) {\n      for (var c = 0; c < this.size; ++c) {\n        if (this.cells[r][c].value === 0) {\n          emptyCells.push({ r: r, c: c });\n        }\n      }\n    }\n    var index = ~~(Math.random() * emptyCells.length);\n    var cell = emptyCells[index];\n    var newValue = Math.random() < this.fourProbability ? 4 : 2;\n    this.cells[cell.r][cell.c] = this.addTile(newValue);\n  }\n  move(direction) {\n    // 0 -> left, 1 -> up, 2 -> right, 3 -> down\n    this.clearOldTiles();\n    for (var i = 0; i < direction; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    var hasChanged = this.moveLeft();\n    for (let i = direction; i < 4; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    if (hasChanged) {\n      this.addRandomTile();\n    }\n    this.setPositions();\n    return this;\n  }\n  clearOldTiles() {\n    this.tiles = this.tiles.filter((tile) => tile.markForDeletion === false);\n    this.tiles.forEach((tile) => {\n      tile.markForDeletion = true;\n    });\n  }\n  hasWon() {\n    return this.won;\n  }\n  hasLost() {\n    var canMove = false;\n    for (var row = 0; row < this.size; ++row) {\n      for (var column = 0; column < this.size; ++column) {\n        canMove |= this.cells[row][column].value === 0;\n        for (var dir = 0; dir < 4; ++dir) {\n          var newRow = row + this.deltaX[dir];\n          var newColumn = column + this.deltaY[dir];\n          if (\n            newRow < 0 ||\n            newRow >= this.size ||\n            newColumn < 0 ||\n            newColumn >= this.size\n          ) {\n            continue;\n          }\n          canMove |=\n            this.cells[row][column].value ===\n            this.cells[newRow][newColumn].value;\n        }\n      }\n    }\n    return !canMove;\n  }\n}\n\nexport { Board };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}